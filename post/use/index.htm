<section class="description-section">
  <h2>How to use P</h2>
  <p>
    P relies on very new technology, so it's a bit trickier to get started with than
    most libraries. You'll need 
    <a href="http://nodejs.org/">Node.js 0.10+</a> and 
    <a href="http://google.com/chrome">Chrome 26+</a> or or <a href="www.getfirefox.com/â€Ž">Firefox 23+</a> before getting started.
  </p>

  <h3>Installing and running onramp</h3>
  <p>
    onramp is a simple WebSocket server which broadcasts its connections to all other
    connections. This allows you to quickly build up a peer-to-peer network to play 
    around with.
  </p>
  <p>To install and run onramp, execute the following in your terminal (you may need <code>sudo</code>):</p>
  <pre class="prettyprint">
npm install -g onramp; # install it globally
onramp; # start onramp with default settings
</pre>
  <p>
    By default onramp
    starts on localhost:20500. You can change the host by passing in the 
    <code>-h [host]</code> argument; for example: <code>onramp -h unsetbit.com:9101</code>.
  </p>

  <h3>Downloading and using P</h3>
  <p>
    You can <a href="https://raw.github.com/unsetbit/p/master/dist/p.js">download the latest version of P here</a>.
    Include it in your application as you would any other script (i.e. &lt;script&gt;). P creates one global variable
    named "P".
  </p>
  
<div class="api">
  <h3>API</h3>
<pre class="prettyprint lang-js">
// Initializing
var rootNode = P.create(); // create the root node

// Connection management
var webSocketNode = rootNode.connect(address); // connect to an onramp WebSocket server
var webRtcNode = webSocketNode.connect(address); // connect to a peer using an onramp connection
var webRtcNode = webRtcNode.connect(address); // connect to a peer using an existing peer connection
anyNode.close(); // close the connection
anyNode.isOpen(); // return true if the connection is open
var nodeArray = anyNode.getPeers(); // returns an array of all peer connections

// Firewalling connections
var protectedNode = P.create({
  firewall: function(offerData){
    // Only accept RTC connection offers which send 'secret' as the offer data
    // this firewall rule will apply to any child nodes as well
    return offerData === 'secret';
  }
});

// Send offerData with a connection request
anyNode.connect({address: address, offerData: 'secret'});


// Sending and receiving messages
webRtcNode.send(message); // send a message to a peer; can be json, string, or arraybuffer
webRtcNode.on('message', function(message){}); // listens for messages from a peer
webRtcNode.on('array buffer', function(arrayBuffer){}); // listens for array buffers from a peer

// Events
anyNode.on('connection', function(peerNode){}); // emitted when a connection is made via this peer
anyNode.on('open', function(){}); // emitted when this connection is open and ready
anyNode.on('close', function(){}); // emitted when this connection is closed
anyNode.on('error', function(err){}); // listens for errors for this connection
anyNode.removeListener(eventName, optionalCallback); // stops listening to an event
</pre>

</div>
</section>
